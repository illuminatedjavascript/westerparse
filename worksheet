    partNumPairs = getAllPartNumPairs(score)
    vertList = analyzer.getVerticalities(score, classFilterList=('Note', 'Rest'))

    for vert in vertList:
        verts = []
        verts.append((vert.offset(leftAlign=False), vert))
        for vert in verts
    
    
    
    
        # SET A: second and fourth species nonconsecutives: off to off
        # first-second: off the beat to off the beat
        # first-fourth: off the beat to off the beat
        
        # (1) look for verts that fall in the middle of the bar, off the beat
        # TODO is there a way to make this work for second species in triple meter?
        #    would have to look at the number of notes per bar in the part
        rules = [vert.offset(leftAlign=False) % paceUnit == paceUnit/2]
        if all(rules):
            vertOffset = vert.offset(leftAlign=False)

        # (2) figure out the species of each part, currently inferred from duration of the note relative to the pace unit (measure length)
            firstSpeciesParts = []
            secondSpeciesParts = []
            fourthSpeciesParts = []

        # (3a) look only at the (1,2) pairs
            vlPairs = pairwiseFromLists(firstSpeciesParts, secondSpeciesParts)
            for vlp in vlPairs:
        
        # (4a) get the next offbeat vert, at the same offbeat as the current vert, but in the next bar
                # this assumes that the species doesn't change in either part
                # TODO for fifth species, will need to confirm that the species of the second vert is also (1,2)
                nextOffbeatVert = [v for v in vertList if v.offset(leftAlign=False) == (vertOffset+paceUnit)]
        # (5a) make a vlq from a pair, if there is a next offbeat vert
        # (6a) check the motion

        # (3b) now look at the (1,4) pairs
            vlPairs = pairwiseFromLists(firstSpeciesParts,fourthSpeciesParts)

        # (4b) get the next onbeat and offbeat verts
                nextOnbeatVert = [v for v in vertList if v.offset(leftAlign=False) == (vertOffset+(paceUnit/2))]
                nextOffbeatVert = [v for v in vertList if v.offset(leftAlign=False) == (vertOffset+paceUnit)]
        # (5b) make a vlq from a pair, if there is a next offbeat vert
        # (6b) check the motion


        # SET B: third species nonconsecutives: off to on

        # (1) look for verts that fall during the bar but are not last in bar

    lenvl = len(vertList)
    offbeatVerts = []
    for i, elem in enumerate(vertList):
        thiselem = elem
        nextelem = vertList[(i+1)%lenvl]#
        if nextelem.offset(leftAlign=False) % paceUnit == 0: 
            pass
        elif thiselem.offset(leftAlign=False) % paceUnit == 0:
            pass
        else:
            offbeatVerts.append(thiselem)
    for vert in offbeatVerts:
        print(vert.offset(leftAlign=False))        
    offbeatVerts = []





get all verts and filter out onbeat verts and just before onbeat verts


        rules = [vert.offset(leftAlign=False) % paceUnit == 0.0]


        pvl = pairwise(vertList)
        pvlfiltered = [pr for pr in pvl if pr[1].offset(leftAlign=False) % paceUnit != 0.0]


    # Consecutive Verticalities            
    #    on the beat to on the beat (first species)
    #    off the beat to immediately following on the beat
    #    off the beat to immediately following off the beat (third)
    
    # the second pair is coinitiated: onto beat and together onto weak beat
    #    if v1n2.beatStrength == v2n2.beatStrength:
    #    
    
    # the first pair is coinitiated but not the second: on to off beat
    #    if v1n1.beatStrength == v2n1.beatStrength and v1n2.beatStrength > v2n2.beatStrength:
    #    if v1n1.beatStrength == v2n1.beatStrength and v1n2.beatStrength < v2n2.beatStrength:
    # none of the notes is coinitiated: off beat to off beat
    #    if v1n1.beatStrength != v2n1.beatStrength and v1n2.beatStrength != v2n2.beatStrength:
    

    # Nonconsecutive Verticalities
    #    off the beat to next but not immediately following on the beat (third)
    #    off the beat to off the beat in next measure (second, fourth)
    #    on the beat to on the beat (second, third)
